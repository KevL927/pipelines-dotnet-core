# variables:
#   serviceConnectionToAzure: AzureDevOps
#   appName: webappdevopspipeline

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'

steps:
- task: UseDotNet@2
  displayName: 'Install .NET Core SDK'
  inputs:
    version: 3.0.x
    performMultiLevelLookup: true

- task: UseDotNet@2
  inputs:
    version: '2.2.x'
    packageType: runtime

# - script: dotnet build --configuration $(buildConfiguration)
#   displayName: 'dotnet build $(buildConfiguration)'
- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    command: build
    projects: '**/*.csproj'
    arguments: '--configuration Release' # Update this to match your need

# - task: DotNetCoreCLI@2
#   inputs:
#     command: test
#     projects: '**/*Tests/*.csproj'
#     arguments: '--configuration $(buildConfiguration) --collect "Code coverage"'

# - task: DotNetCoreCLI@2
#   inputs:
#     command: test
#     projects: Refit.Tests/Refit.Tests.csproj
#     arguments: -c $(BuildConfiguration) --settings $(System.DefaultWorkingDirectory)/CodeCoverage.runsettings --collect:"XPlat Code Coverage" -- RunConfiguration.DisableAppDomain=true
#   displayName: Run Tests

# - task: DotNetCoreCLI@2
#   inputs:
#     command: custom
#     custom: tool
#     arguments: install --tool-path . dotnet-reportgenerator-globaltool
#   displayName: Install ReportGenerator tool
  
# - script: reportgenerator -reports:$(Agent.TempDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/coverlet/reports -reporttypes:"Cobertura"
#   displayName: Create reports
  
# - task: PublishCodeCoverageResults@1
#   displayName: 'Publish code coverage'
#   inputs:
#     codeCoverageTool: Cobertura
#     summaryFileLocation: $(Build.SourcesDirectory)/coverlet/reports/Cobertura.xml

- task: DotNetCoreCLI@2
  inputs:
    command: publish
    publishWebProjects: True
    arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
    zipAfterPublish: True

# this code takes all the files in $(Build.ArtifactStagingDirectory) and uploads them as an artifact of your build.
- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)' 
    artifactName: 'helloApp'

# - task: AzureWebApp@1
#   inputs:
#     azureSubscription: 'Azure DevOps Service Connection'
#     appName: 'dotnethelloap'
#     package: $(System.ArtifactsDirectory)/**/*.zip

- task: DotNetCoreCLI@2
  inputs:
    command: publish
    publishWebProjects: True
    arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
    zipAfterPublish: True
